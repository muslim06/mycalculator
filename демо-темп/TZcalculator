
import java.util.Scanner;


public class TZcalculator {

        public static void main(String[] args) throws Exception {
            while (true) {
                System.out.println("Привет. Введите строку в виде число знак операции число!");
                Scanner scanner = new Scanner(System.in);
                String sistem = scanner.nextLine();
                String[] Arr = sistem.split(" ");
                if (Arr.length != 3) {
                    throw new Exception("Должно быть: Два операнда и один оператор!");
                }
                int num1 = convertorInt(Arr[0]);
                int num2 = convertorInt(Arr[2]);

                if (num1 > 0 && num2 > 0) {
                    switch (Arr[1]) {
                        case "+" -> System.out.println(num1 + num2);
                        case "-" -> System.out.println(num1 - num2);
                        case "*" -> System.out.println(num1 * num2);
                        case "/" -> System.out.println(num1 / num2);
                        default -> throw new Exception("Неверный знак операции!");
                    }
                } else {
                    if (convertoRim(Arr[0]) && convertoRim(Arr[2])) {
                        int tempResult = resultOfRimInArabic(convertFromRim(Arr[0]), Arr[1], convertFromRim(Arr[2]));
                        System.out.println(convertToRArabicFromRim(tempResult));
                    } else {
                        throw new Exception("Вводите либо арабские числа, либо римские!");
                    }
                }

            }
        }

    static String[] rimNum= {"ZERO", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X",
            "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVII", "XVIII" , "XIX", "XX",
            "XXI", "XXII", "XXIII", "XXIV", "XXV", "XXVI", "XXVII", "XXVIII", "XXIX", "XXX",
            "XXXI", "XXXII", "XXXIII", "XXXIV", "XXXV", "XXXVI", "XXXVII", "XXXVIII", "XXXIX", "XL",
            "XLI", "XLII", "XLIII", "XLIV", "XLV", "XLVI", "XLVII", "XLVIII", "XLIX", "L",
            "LI", "LII", "LIII", "LIV", "LV", "LVI", "LVII", "LVIII", "LIX", "LX",
            "LXI", "LXII", "LXIII", "LXIV", "LXV", "LXVI", "LXVII", "LXVIII", "LXIX", "LXX",
            "LXXI", "LXXII", "LXXIII", "LXXIV", "LXXV", "LXXVI", "LXXVII", "LXXVIII", "LXXIX", "LXXX",
            "LXXXI", "LXXXII", "LXXXIII", "LXXXIV", "LXXXV", "LXXXVI", "LXXXVII", "LXXXVIII", "LXXXIX", "XC",
            "XCI", "XCII", "XCIII", "XCIV", "XCV", "XCVI", "XCVII", "XCVIII", "XCIX", "C"  };

    static int convertorInt(String conferableString) throws Exception {
        int rim = 0;
        try {
            rim = Integer.parseInt(conferableString);
        } catch (Exception e) {
            return rim = -1;
        }

        if (rim > 10 ){
            throw new Exception("Одно из введенных чисел больше 10!");
        } else {
            return rim;
        }
    }

    static boolean convertoRim(String conferableString) {
        String[] rimNumArr = {"I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X"};
        boolean answer = false;
        for (String str : rimNumArr) {
            if (str.equals(conferableString)){
                answer = true;
                break;
            }
        }
        return answer;
    }

    static int convertFromRim(String convertableString) throws Exception{

        int number = 0;
        for (int i = 0; i < rimNum.length; i++) {
            if (rimNum[i].equals(convertableString)){
                number = i;
            }
        }
        if (number > 0 ){
            return number;
        } else {
            throw new Exception("Некорректный ввод!");
        }
    }

    static String convertToRArabicFromRim(int Result) throws Exception {
        if (Result <= 0){
            throw new Exception("Результат операции с римскими числами не может быть равен/меньше нуля");
        }
        return rimNum[Result];
    }

    static int resultOfRimInArabic(int num1, String operation, int num2){
        return switch (operation) {
            case "+" -> num1 + num2;
            case "-" -> num1 - num2;
            case "*" -> num1 * num2;
            case "/" -> num1 / num2;
            default -> throw new RuntimeException("Неверный знак операции");
        };
    }
}
